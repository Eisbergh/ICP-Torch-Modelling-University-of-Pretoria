import numpy as np
from all_variables import *


temperature_data = """
9000	8900	8800	8500	8200	8000	7500	6900	6000	5000	4000	350
9050	9000	8800	8500	8200	8000	7500	6900	6000	5000	4000	350
9050	9050	8800	8500	8200	8000	7500	6900	6000	5000	4000	350
9050	9050	9000	8500	8200	8000	7500	6900	6000	5000	4000	350
9050	9050	9000	8800	8200	8000	7500	6900	6000	5000	4000	350
9050	9050	9050	8800	8200	8000	7500	6900	6000	5000	4000	350
9050	9050	9050	8800	8200	8000	8000	6900	6000	5000	4000	350
9050	9050	9050	8800	8800	8000	8000	6900	6000	5000	4000	350
9050	9050	9050	9000	8800	8000	8000	7500	6000	5000	4000	350
9100	9100	9050	9000	8800	8000	8000	7500	6000	5000	4000	350
9100	9100	9050	9050	8800	8000	8000	7500	6000	5500	4000	350
9200	9100	9050	9050	8800	8800	8000	7500	6000	5500	4000	350
9200	9100	9100	9050	9000	8800	8000	7500	6000	5500	4000	350
9200	9200	9100	9050	9000	8800	8000	7500	6000	6000	4000	350
9200	9200	9100	9100	9050	8800	8000	7500	6000	6000	4000	350
9500	9200	9200	9100	9050	8800	8000	7500	6000	6000	4000	350
9500	9200	9200	9100	9050	8800	8000	7500	6000	6000	4000	350
9500	9500	9200	9100	9100	8800	8000	7500	6000	6000	4000	350
9500	9500	9200	9200	9100	9000	8000	7500	6000	6000	4000	350
9500	9500	9500	9200	9100	9000	8000	7500	6000	6000	4000	350
9500	9500	9500	9200	9100	9000	8500	8000	6000	6000	4000	350
9500	9500	9500	9200	9200	9000	8500	8000	7000	6000	4000	350
9500	9500	9500	9500	9200	9000	8500	8000	7500	6000	4000	350
9500	9500	9500	9500	9200	9000	8500	8000	7500	5500	4000	350
9500	9500	9500	9500	9200	9000	9000	8000	7500	5500	4000	350
9500	9500	9500	9500	9500	9000	9000	8000	7500	5500	4000	350
9500	9500	9500	9500	9500	9000	9000	8000	7500	6000	4000	350
9500	9500	9500	9500	9500	9200	9000	8000	7500	6000	4000	350
9500	9500	9500	9500	9500	9500	9000	8500	7500	6000	4000	350
9500	9500	9600	9600	9500	9500	9000	8500	7500	6000	4000	350
9500	9600	9600	9600	9600	9500	9000	9000	7500	6000	4000	350
9500	9600	9600	9700	9600	9500	9500	9000	8000	6000	4000	350
9500	9600	9700	9700	9700	9600	9500	9000	8000	6000	4000	350
9500	9600	9700	9700	9700	9600	9500	9000	8000	6000	4000	350
9500	9600	9700	9700	9700	9700	9500	9000	8000	6000	4000	350
9600	9600	9700	9700	9700	9700	9700	9500	8000	6700	4000	350
9600	9600	9700	9700	9750	9800	9700	9500	8000	6900	4000	350
9600	9600	9700	9700	9750	9800	9800	9500	8500	6900	4000	350
9600	9600	9700	9700	9800	9840	9800	9500	8500	6900	4000	350
9600	9700	9700	9750	9800	9840	9800	9500	9000	6900	4000	350
9600	9700	9700	9750	9840	9840	9800	9500	9000	6900	3800	350
9600	9700	9700	9750	9840	9840	9800	9500	9000	6900	3700	350
9600	9700	9700	9750	9840	9800	9800	9500	8500	6900	3700	350
9600	9700	9700	9750	9800	9800	9800	9500	8300	6000	3500	350
9600	9700	9700	9750	9800	9800	9700	9500	8200	5700	3000	350
9600	9700	9750	9750	9840	9840	9700	9000	8000	5700	2000	350
9600	9700	9750	9800	9840	9840	9700	9000	8000	5700	2000	350
9600	9750	9750	9800	9840	9840	9700	9200	8000	4500	2000	350
9600	9750	9750	9800	9840	9840	9700	9200	7500	4500	2000	350
9700	9750	9750	9800	9840	9840	9700	9000	7500	4500	2000	350
9700	9750	9750	9800	9840	9840	9700	9000	7500	4500	2000	350
9700	9750	9750	9800	9870	9870	9700	9000	7500	4500	2000	350
9700	9750	9750	9800	9870	9870	9700	9000	7500	4500	2000	350
9700	9750	9750	9800	9870	9870	9700	9000	7500	4500	2000	350
9700	9750	9750	9800	9900	9870	9700	9200	7500	4500	2000	350
9700	9750	9750	9800	9900	9870	9700	9200	7500	4500	2000	350
9700	9750	9750	9800	9870	9870	9700	9200	7500	4500	2000	350
9700	9750	9750	9800	9870	9870	9700	9000	7500	4000	2000	350
9700	9750	9750	9800	9870	9800	9700	9000	7000	4000	1000	350
9700	9750	9750	9800	9800	9800	9500	9000	6000	4000	1000	350
9700	9750	9750	9800	9800	9800	9500	8500	6000	3500	1000	350
9700	9750	9750	9800	9800	9700	9200	8200	6000	3500	1000	350
9000	9750	9750	9800	9800	9700	9000	8200	6000	3000	1000	350
9000	9750	9750	9750	9700	9500	9000	8050	6000	3000	1000	350
9000	9750	9750	9750	9700	9500	9000	8050	5000	3000	1000	350
9000	9750	9750	9750	9700	9500	9000	8050	5000	3000	1000	350
9000	9700	9750	9750	9700	9500	8500	8050	5000	3000	1000	350
9000	9600	9700	9700	9500	9200	8200	8000	5000	2000	1000	350
9500	9500	9600	9600	9500	9000	8000	7000	5000	2000	1000	350
8000	9000	9500	9500	9000	9000	8000	6000	5000	2000	1000	350
6000	8000	9000	9000	9000	8500	7500	6000	4000	2000	1000	350
2000	6000	8000	8500	8200	8000	7500	6000	3000	2000	1000	350
1000	2000	6000	8200	8200	8000	7500	5000	3000	2000	1000	350
1000	2000	4000	8000	8200	8000	6000	4000	2000	1000	1000	350
1000	1000	4000	6000	6000	6000	4000	3000	2000	1000	1000	350
1000	1000	4000	4000	4000	4000	4000	2000	1000	1000	1000	350
1000	1000	2000	4000	4000	4000	2000	2000	1000	1000	1000	350
1000	1000	2000	2000	2000	2000	1000	1000	1000	1000	1000	350
1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	350
1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	350
1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	350 	350
1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	350 	350
1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	350 	350
1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	350 	350
1000	1000	1000	1000	1000	1000	1000	1000	1000	350 	350 	350
1000	1000	1000	1000	1000	1000	1000	1000	1000	350 	350 	350
1000	1000	1000	1000	1000	1000	1000	1000	1000	350 	350 	350
1000	1000	1000	1000	1000	1000	1000	1000	1000	350 	350 	350
1000	1000	1000	1000	1000	1000	1000	1000	1000	350 	350 	350
1000	1000	1000	1000	1000	1000	1000	1000	1000	350 	350 	350
1000	1000	1000	1000	1000	1000	1000	1000	1000	350 	350 	350
1000	1000	1000	1000	1000	1000	1000	1000	1000	350 	350 	350
350    	350 	350 	350 	350 	350 	350 	350 	350 	350 	350     350
350    	350 	350 	350 	350 	350 	350 	350 	350 	350 	350     350
350    	350 	350 	350 	350 	350 	350 	350 	350 	350 	350     350
350    	350 	350 	350 	350 	350 	350 	350 	350 	350 	350     350
"""


# Convert string data into a 2D NumPy array
temperature_array = np.array([list(map(int, line.split())) for line in temperature_data.strip().split('\n')])

from scipy.interpolate import RegularGridInterpolator

# Example original data (temp0 must already be defined and 2D)

temp0 = np.flip(temperature_array.T, axis=0)
original_Ni, original_Nj = temp0.shape


# Define the interpolation function
def temp(Ni, Nj, tempfield=temp0):
    # Original grid
    original_Ni, original_Nj = tempfield.shape
    x = np.linspace(0, Lz, original_Ni)
    y = np.linspace(0, Lr, original_Nj)

    # Create interpolator
    interpolator = RegularGridInterpolator((x, y), tempfield, bounds_error=False, fill_value=None)

    # New grid
    xi = np.linspace(0, Lz, Ni)
    yi = np.linspace(0, Lr, Nj)
    X, Y = np.meshgrid(xi, yi, indexing='ij')  # shape: (Ni, Nj)

    # Interpolate
    points = np.stack([X.ravel(), Y.ravel()], axis=-1)
    interpolated = interpolator(points).reshape(Ni, Nj)

    return interpolated


def powerf(current):
    """
    Estimate current [A] from input power [W] using an exponential fit:
        I(P) = a * exp(b * P) + c
    """
    from scipy.optimize import curve_fit

    # Experimental data
    current_data = np.array([150, 240, 253, 265, 277, 288])
    power_data = np.array([5, 9, 10, 11, 12, 13])

    # Exponential model
    def exp_model(Current, a, b, c):
        return a * np.exp(b * Current) + c

    # Fit parameters (with initial guess)
    params, _ = curve_fit(exp_model, current_data, power_data, p0=[1e-3, 0.01, 0])

    # Return estimated current for input power(s)
    return exp_model(np.array(current), *params)


def currentf(power):
    current = np.linspace(50, 400)
    powers = powerf(current)
    return np.interp(power, powers, current)


if __name__ == "__main__":
    power = np.linspace(2, 15)
    curr = currentf(power)
    power_data = np.array([150, 240, 253, 265, 277, 288])
    current_data = np.array([5, 9, 10, 11, 12, 13])

    import matplotlib.pyplot as plt

    # Set a professional style
    plt.style.use('seaborn-v0_8')  # Clean, scientific style

    # Create figure with specified size (in inches)
    plt.figure(figsize=(8, 6), dpi=100)

    # Plot theoretical curve
    plt.plot(power, curr, label='Theoretical Model', color='navy', linewidth=2)

    # Plot experimental data
    plt.scatter(current_data, power_data, label='Experimental Data', color='crimson',
                s=80, marker='o', edgecolors='black', alpha=0.8)

    # Customize axes
    plt.xlabel('Current (A)', fontsize=14, labelpad=10)
    plt.ylabel('Power (kW)', fontsize=14, labelpad=10)

    # Add grid
    plt.grid(True, linestyle='--', alpha=0.7)

    # Add legend
    plt.legend(fontsize=12, loc='best')

    # Adjust tick parameters
    plt.tick_params(axis='both', which='major', labelsize=12, direction='in',
                    length=5, width=1)

    # Ensure layout is tight to avoid clipping
    plt.tight_layout()
    plt.savefig("Power-current.png", dpi=1000)
    # Show plot
    plt.show()





