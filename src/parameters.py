import numpy as np


class EquationOfState:

    def __init__(self, gamma=1.4):
        self.m_ar = 6.6423 * 10 ** (-26)
        self.kb = 1.380649 * 10 ** (-23)
        self.R = 8.314
        self.MM_ar = 40
        self.gamma = gamma
        self.mu = 10

    def pressure_eos(self, T, rho):
        """
        returns the instantaneous pressure at that density and temperature.
        Can make the solution more exact if you want to, but I am not going to do it now.
        :param T:
        :param rho:
        :return:
        """

        var = 1.264 * 10 ** (-6) * T ** (5 / 2) * (2 + np.exp(-2062 / T)) * np.exp(-183000 / T)

        alpha = abs(np.sqrt(var))

        pn1 = rho * self.kb * T * (1 + alpha) / self.m_ar

        return pn1

    def pressure_ideal(self, T, rho):
        """returns pressure"""
        return rho * self.R * T / self.MM_ar * 1000

    def rho_ideal(self, T, p):
        """returns density"""
        return p*self.MM_ar/1000/T/self.R

    def muvf(self, T):
        mu = np.ones_like(T)*self.mu
        return mu


def rhof(T):
    return 1.783 * (273 / T - 2.06e-7 * T + 6.71e-11 * T ** 2 - 5.21e-15 * T ** 3)


def d_dT_rhof(T):
    return 1.783 * (-273 / T**2 - 2.06*10**(-7) + 13.42*10**(-11)*T - 15.63*10**(-15) * T**2)


temparray = np.linspace(1, 13500, 1350)
cparray = np.linspace(1, 13500, 1350)  # Temp limit is 13 500 K
cparray[0:600] = 518.8
cparray[600:1000] = 518.8 + 995.8 * (cparray[600:1000] / 10 ** 4) ** 11
cparray[1000:] = 518.8 + 995.8 * (cparray[1000:] / 10 ** 4) ** 7


def Cpf(T):
    Cp_new = np.interp(T, temparray, cparray)
    return Cp_new


# temparray2 = np.linspace(500, 12000, 11501)
karray1 = -0.024 * (np.linspace(1, 6000, 1000) / 10 ** 4) ** 2 + 0.262 * (
            np.linspace(500, 6000, 1000) / 10 ** 4) + 0.0165
karray2 = 0.248 * (np.linspace(6001, 20000, 1000) / 10 ** 4) ** 6 + 0.372 * (
            np.linspace(6001, 12000, 1000) / 10 ** 4) ** 3 + 0.074
karray = np.append(karray1, karray2)
temparray2 = np.linspace(500, 20000, len(karray))


def kf(T):
    k_new = np.interp(T, temparray2, karray)
    return k_new


def Ai(T):
    t = np.linspace(0, 20000, 20001)

    A0, A1, A2, A3, A4, A5, A6 = [t.copy() for _ in range(7)]

    # A0 coefficients
    A0[:2000] = -1.2901940032e-12
    A0[2000:10000] = 2.6801341470e-06
    A0[10000:12000] = -3.3638459373e-01
    A0[12000:] = -1.1051989982e-01

    # A1 coefficients
    A1[:2000] = 1.0183396590e-07
    A1[2000:10000] = 5.8581388296e-08
    A1[10000:12000] = 2.0960499967e-04
    A1[12000:] = 4.0286780091e-05

    # A2 coefficients
    A2[:2000] = -9.3186162829e-11
    A2[2000:10000] = -1.1403793050e-11
    A2[10000:12000] = -5.4183875997e-08
    A2[12000:] = -6.0095708464e-09

    # A3 coefficients
    A3[:2000] = 7.9179938250e-14
    A3[2000:10000] = 2.4434611751e-15
    A3[10000:12000] = 7.4413524700e-12
    A3[12000:] = 4.7195193788e-13

    # A4 coefficients
    A4[:2000] = -4.1540632566e-17
    A4[2000:10000] = -3.3873975059e-19
    A4[10000:12000] = -5.7262365757e-16
    A4[12000:] = -2.0645964614e-17

    # A5 coefficients
    A5[:2000] = 1.1922960073e-20
    A5[2000:10000] = 2.5526498290e-23
    A5[10000:12000] = 2.3413417289e-20
    A5[12000:] = 4.7805168030e-22

    # A6 coefficients
    A6[:2000] = -1.4284392204e-24
    A6[2000:10000] = -7.8712548005e-28
    A6[10000:12000] = -3.9751183148e-25
    A6[12000:] = -4.5842445161e-27

    # Interpolation
    A0_new = np.interp(T, t, A0)
    A1_new = np.interp(T, t, A1)
    A2_new = np.interp(T, t, A2)
    A3_new = np.interp(T, t, A3)
    A4_new = np.interp(T, t, A4)
    A5_new = np.interp(T, t, A5)
    A6_new = np.interp(T, t, A6)

    return A0_new, A1_new, A2_new, A3_new, A4_new, A5_new, A6_new


def muvf_2(T):  ## viscosity of the argon gas

    A0, A1, A2, A3, A4, A5, A6 = Ai(T)

    return A0 + A1 * T + A2 * T ** 2 + A3 * T ** 3 + A4 * T ** 4 + A5 * T ** 5 + A6 * T ** 6


data = np.array([
    [300.0, 2.35890E-05],
    [1000.0, 5.36130E-05],
    [2000.0, 9.14970E-05],
    [3000.0, 1.21880E-04],
    [5000.0, 1.68550E-04],
    [6000.0, 1.91100E-04],
    [6500.0, 2.02690E-04],
    [7000.0, 2.14380E-04],
    [7500.0, 2.26000E-04],
    [8000.0, 2.37290E-04],
    [8500.0, 2.47940E-04],
    [9000.0, 2.57470E-04],
    [9500.0, 2.65210E-04],
    [10000.0, 2.70120E-04],
    [10500.0, 2.70840E-04],
    [11000.0, 2.65850E-04],
    [11500.0, 2.53880E-04],
    [12000.0, 2.34560E-04],
    [12500.0, 2.08840E-04],
    [13000.0, 1.79010E-04],
    [13500.0, 1.48080E-04],
    [14500.0, 9.37510E-05],
    [15500.0, 5.79900E-05],
    [16500.0, 3.90350E-05],
    [17500.0, 3.03210E-05],
    [18500.0, 2.67810E-05],
    [19500.0, 2.55790E-05],
    [20500.0, 2.51380E-05],
    [21500.0, 2.44000E-05],
    [22500.0, 2.26840E-05],
    [25000.0, 1.51080E-05],
    [26500.0, 1.11930E-05],
    [28000.0, 8.77260E-06],
    [30000.0, 7.24980E-06]
])


def muvf(T):
    datas = data.T
    return np.interp(T, datas[0], datas[1])



temper = [
    100, 200, 300, 400, 500, 600, 700, 800, 900, 1000,
    1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000,
    2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000,
    3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3900, 4000,
    4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000,
    5100, 5200, 5300, 5400, 5500, 5600, 5700, 5800, 5900, 6000,
    6100, 6200, 6300, 6400, 6500, 6600, 6700, 6800, 6900, 7000,
    7100, 7200, 7300, 7400, 7500, 7600, 7700, 7800, 7900, 8000,
    8100, 8200, 8300, 8400, 8500, 8600, 8700, 8800, 8900, 9000,
    9100, 9200, 9300, 9400, 9500, 9600, 9700, 9800, 9900, 10000,
    10100, 10200, 10300, 10400, 10500, 10600, 10700, 10800, 10900, 11000,
    11100, 11200, 11300, 11400, 11500, 11600, 11700, 11800, 11900, 12000,
    12100, 12200, 12300, 12400, 12500, 12600, 12700, 12800, 12900, 13000,
    13100, 13200, 13300, 13400
]

electrical_conductivity = [
    4.5419E-264, 3.2038E-129, 2.85201E-84, 8.50923E-62, 2.59857E-48, 2.53881E-39, 6.69859E-33, 4.3853E-28,
    2.44224E-24, 2.42338E-21, 6.85821E-19, 7.57476E-17, 4.05691E-15, 1.2304E-13, 2.36765E-12, 3.14814E-11,
    3.08735E-10, 2.34936E-09, 1.4439E-08, 7.40056E-08, 3.24639E-07, 1.24497E-06, 4.24774E-06, 1.30839E-05,
    3.68327E-05, 9.57529E-05, 0.000231918, 0.000527324, 0.001132964, 0.002313197, 0.00451034, 0.008434924,
    0.015187137, 0.026414808, 0.044512654, 0.07286662, 0.116145866, 0.180643484, 0.274665427, 0.408965439,
    0.597222169, 0.856553145, 1.20805896, 1.677389989, 2.295327124, 3.098367535, 4.129306246, 5.437804372,
    7.080935158, 9.123699523, 11.63950346, 14.71059053, 18.4284237, 22.89401153, 28.21817518, 34.52175334,
    41.93574346, 50.60137853, 60.67013957, 72.3037049, 85.6738378, 100.9622151, 118.3601996, 138.0685597,
    160.2971399, 185.2644867, 213.1974336, 244.3306498, 278.9061572, 317.1728203, 359.3858125, 405.8060643,
    456.6996967, 512.3374446, 572.9940721, 638.9477864, 710.4796507, 787.8730003, 871.4128654, 954.1967988,
    1019.034286, 1086.533886, 1156.715518, 1229.596526, 1305.191735, 1383.513513, 1464.571832, 1548.374341,
    1634.926428, 1724.231296, 1816.290034, 1911.10169, 2008.663344, 2108.970188, 2212.015593, 2317.791191,
    2426.286943, 2537.491219, 2651.390863, 2767.971272, 2887.216465, 3009.109148, 3133.63079, 3260.761683,
    3390.48101, 3522.76691, 3657.596538, 3794.946126, 3934.791044, 4077.105851, 4221.864358, 4369.039674,
    4518.604263, 4670.529992, 4824.788179, 4981.349639, 5140.184728, 5301.26339, 5464.555193, 5630.029372,
    5797.654865, 5967.400351, 6139.234285, 6313.124928, 6489.040385, 6666.948629, 6846.817533, 7028.614899,
    7212.308482, 7397.866015, 7585.255236, 7774.443904, 7965.39983, 8158.090887
]


def sigmaf(T):
    return np.interp(T, temper, electrical_conductivity)


def Qrf(T):  # Slim wees tyd
    multiplier = np.floor(np.arctan(T - 9500) / np.pi + 1)  ## Removes if statement that would waste time.
    Qr = multiplier * (5600 * (T - 9500) + 181 * (T - 9500) ** 2)
    return Qr


def Qrf2(T, Nj_safe, Nj):
    """Stabilizer function that ensures that the temperature does not increase by too much at the wall."""
    Qr = np.zeros_like(T)
    Cutoff = 3000   # temp above which artifical radiation takes place.   Was 5000
    multiplier = np.floor(np.arctan(T[:, Nj_safe:] - Cutoff) / np.pi + 1)
    Qr[:, Nj_safe:] = multiplier*(5600 * (T[:, Nj_safe:] - Cutoff) + 181 * (T[:, Nj_safe:] - Cutoff) ** 2)

    Cutoff = 350  # temp above which artifical radiation takes place.  wAS 5000
    point = Nj_safe+(Nj-Nj_safe)/2
    multiplier = np.floor(np.arctan(T[:, int(np.floor(point)):] - Cutoff) / np.pi + 1)
    Qr[:, int(np.floor(point)):] = (
            multiplier * (5600 * (T[:, int(np.floor(point)):] - Cutoff) +
                          181 * (T[:, int(np.floor(point)):] - Cutoff) ** 2)
    )
    return Qr


temperatures = np.linspace(0, 13500, 1000)
enthalpies = [0.0, 7010.810810810811, 14021.621621621622, 21032.43243243243, 28043.243243243243, 35054.054054054046,
         42064.86486486486, 49075.67567567567, 56086.48648648649, 63097.29729729729, 70108.10810810809,
         77118.9189189189, 84129.72972972972, 91140.54054054053, 98151.35135135135, 105162.16216216216,
         112172.97297297297, 119183.78378378377, 126194.59459459459, 133205.4054054054, 140216.21621621618,
         147227.027027027, 154237.8378378378, 161248.64864864864, 168259.45945945944, 175270.27027027027,
         182281.08108108107, 189291.8918918919, 196302.7027027027, 203313.51351351352, 210324.32432432432,
         217335.13513513515, 224345.94594594595, 231356.75675675675, 238367.56756756754, 245378.37837837834,
         252389.18918918917, 259399.99999999997, 266410.8108108108, 273421.62162162166, 280432.43243243237,
         287443.2432432432, 294454.054054054, 301464.86486486485, 308475.6756756756, 315486.48648648645,
         322497.2972972973, 329508.1081081081, 336518.9189189189, 343529.7297297297, 350540.54054054053,
         357551.3513513513, 364562.16216216213, 371572.97297297296, 378583.7837837838, 385594.59459459456,
         392605.4054054054, 399616.2162162162, 406627.02702702704, 413637.8378378378, 420648.64864864864,
         427659.45945945947, 434670.2702702703, 441681.08108108107, 448691.8918918919, 455702.7027027027,
         462713.5135135135, 469724.32432432426, 476735.1351351351, 483745.9459459459, 490756.7567567567,
         497767.5675675675, 504778.37837837834, 511789.1891891892, 518799.99999999994, 525810.8108108108,
         532821.6216216217, 539832.4324324324, 546843.2432432433, 553854.0540540541, 560864.8648648647,
         567875.6756756756, 574886.4864864864, 581897.2972972973, 588908.108108108, 595918.9189189189,
         602929.7297297297, 609940.5405405405, 616951.3513513512, 623962.1621621621, 630972.9729729729,
         637983.7837837838, 644994.5945945946, 652005.4054054054, 659016.2162162162, 666027.027027027,
         673037.8378378378, 680048.6486486486, 687059.4594594594, 694070.2702702703, 701081.0810810811,
         708091.891891892, 715102.7027027026, 722113.5135135135, 729124.3243243243, 736135.1351351351,
         743145.9459459459, 750156.7567567567, 757167.5675675676, 764178.3783783783, 771189.1891891891,
         778199.9999999999, 785210.8108108108, 792221.6216216215, 799232.4324324324, 806243.2432432432,
         813254.0540540541, 820264.8648648647, 827275.6756756756, 834286.4864864864, 841297.2972972973,
         848308.108108108, 855318.9189189189, 862329.7297297297, 869340.5405405406, 876351.3513513512,
         883362.1621621621, 890372.9729729729, 897383.7837837838, 904394.5945945946, 911405.4054054054,
         918416.2162162162, 925427.027027027, 932437.8378378378, 939448.6486486485, 946459.4594594594,
         953470.2702702702, 960481.0810810811, 967491.8918918918, 974502.7027027027, 981513.5135135134,
         988524.3243243243, 995535.135135135, 1002545.9459459459, 1009556.7567567567, 1016567.5675675676,
         1023578.3783783783, 1030589.1891891891, 1037599.9999999999, 1044610.8108108108, 1051621.6216216215,
         1058632.4324324324, 1065643.2432432433, 1072654.054054054, 1079664.8648648649, 1086675.6756756755,
         1093686.4864864866, 1100697.2972972973, 1107708.1081081082, 1114718.9189189188, 1121729.7297297295,
         1128740.5405405406, 1135751.3513513512, 1142762.1621621621, 1149772.9729729728, 1156783.783783784,
         1163794.5945945946, 1170805.4054054052, 1177816.216216216, 1184827.027027027, 1191837.8378378379,
         1198848.6486486485, 1205859.4594594594, 1212870.2702702703, 1219881.081081081, 1226891.8918918918,
         1233902.7027027025, 1240913.5135135136, 1247924.3243243243, 1254935.1351351351, 1261945.9459459458,
         1268956.7567567567, 1275967.5675675676, 1282978.3783783782, 1289989.189189189, 1297000.0,
         1304010.810810811, 1311021.6216216215, 1318032.4324324324, 1325043.243243243, 1332054.054054054,
         1339064.8648648649, 1346075.6756756755, 1353086.4864864864, 1360097.2972972973, 1367108.1081081082,
         1374118.9189189188, 1381129.7297297295, 1388140.5405405406, 1395151.3513513512, 1402162.1621621621,
         1409172.9729729728, 1416183.783783784, 1423194.5945945946, 1430205.4054054052, 1437216.216216216,
         1444227.027027027, 1451237.8378378379, 1458248.6486486485, 1465259.4594594594, 1472270.2702702703,
         1479281.081081081, 1486291.8918918918, 1493302.7027027025, 1500313.5135135134, 1507324.3243243243,
         1514335.1351351351, 1521345.9459459458, 1528356.7567567567, 1535367.5675675676, 1542378.3783783782,
         1549389.189189189, 1556399.9999999998, 1563410.810810811, 1570421.6216216215, 1577432.4324324324,
         1584443.243243243, 1591454.054054054, 1598464.8648648649, 1605475.6756756755, 1612486.4864864864,
         1619497.2972972973, 1626508.1081081082, 1633518.9189189188, 1640529.7297297295, 1647540.5405405406,
         1654551.3513513512, 1661562.1621621621, 1668572.9729729728, 1675583.783783784, 1682594.5945945946,
         1689605.4054054052, 1696616.216216216, 1703627.0270270268, 1710637.8378378379, 1717648.6486486485,
         1724659.4594594594, 1731670.27027027, 1738681.0810810812, 1745691.8918918918, 1752702.7027027025,
         1759713.5135135134, 1766724.3243243243, 1773735.1351351351, 1780745.9459459458, 1787756.7567567567,
         1794767.5675675676, 1801778.3783783782, 1808789.189189189, 1815799.9999999998, 1822810.810810811,
         1829821.6216216215, 1836832.4324324324, 1843843.243243243, 1850854.054054054, 1857864.8648648649,
         1864875.6756756755, 1871886.4864864864, 1878897.297297297, 1885908.1081081082, 1892918.9189189188,
         1899929.7297297297, 1906940.5405405404, 1913951.3513513512, 1920962.1621621621, 1927972.9729729728,
         1934983.7837837837, 1941994.5945945946, 1949005.4054054054, 1956016.216216216, 1963027.0270270268,
         1970037.8378378379, 1977048.6486486485, 1984059.4594594594, 1991070.27027027, 1998081.0810810812,
         2005091.8918918918, 2012102.7027027025, 2019113.5135135134, 2026124.3243243243, 2033135.1351351351,
         2040145.9459459458, 2047156.7567567567, 2054167.5675675676, 2061178.3783783782, 2068189.189189189,
         2075199.9999999998, 2082210.8108108107, 2089221.6216216215, 2096232.4324324324, 2103243.243243243,
         2110254.054054054, 2117264.864864865, 2124275.6756756753, 2131286.4864864866, 2138297.297297297,
         2145308.108108108, 2152318.918918919, 2159329.7297297297, 2166340.5405405406, 2173351.351351351,
         2180362.162162162, 2187372.9729729732, 2194383.7837837837, 2201394.5945945946, 2208405.405405405,
         2215416.2162162163, 2222427.027027027, 2229437.8378378376, 2236448.6486486485, 2243459.459459459,
         2250470.2702702703, 2257481.081081081, 2264491.8918918916, 2271502.7027027025, 2278513.5135135134,
         2285524.3243243243, 2292535.135135135, 2299545.9459459456, 2306556.7567567565, 2313567.567567568,
         2320578.378378378, 2327589.189189189, 2334600.0, 2341610.8108108104, 2348621.621621622, 2355632.432432432,
         2362643.243243243, 2369654.054054054, 2376664.8648648644, 2383675.6756756757, 2390686.4864864866,
         2397697.297297297, 2404708.108108108, 2411718.918918919, 2418729.7297297297, 2425740.5405405406,
         2432751.351351351, 2439762.162162162, 2446772.972972973, 2453783.7837837837, 2460794.5945945946,
         2467805.405405405, 2474816.2162162163, 2481827.027027027, 2488837.8378378376, 2495848.6486486485,
         2502859.459459459, 2509870.2702702703, 2516881.081081081, 2523891.8918918916, 2530902.7027027025,
         2537913.5135135134, 2544924.3243243243, 2551935.135135135, 2558945.9459459456, 2565956.7567567565,
         2572967.567567568, 2579978.378378378, 2586989.189189189, 2594000.0, 2601010.8108108104, 2608021.621621622,
         2615032.432432432, 2622043.243243243, 2629054.054054054, 2636064.864864865, 2643075.6756756757,
         2650086.486486486, 2657097.297297297, 2664108.108108108, 2671118.918918919, 2678129.7297297297,
         2685140.5405405406, 2692151.351351351, 2699162.162162162, 2706172.972972973, 2713183.7837837837,
         2720194.5945945946, 2727205.405405405, 2734216.2162162163, 2741227.027027027, 2748237.8378378376,
         2755248.6486486485, 2762259.459459459, 2769270.2702702703, 2776281.081081081, 2783291.8918918916,
         2790302.7027027025, 2797313.513513514, 2804324.3243243243, 2811335.135135135, 2818345.9459459456,
         2825356.7567567565, 2832367.567567568, 2839378.378378378, 2846389.189189189, 2853399.9999999995,
         2860410.8108108104, 2867421.621621622, 2874432.432432432, 2881443.243243243, 2888454.054054054,
         2895464.864864865, 2902475.6756756757, 2909486.486486486, 2916497.297297297, 2923508.108108108,
         2930518.918918919, 2937529.7297297297, 2944540.5405405406, 2951551.351351351, 2958562.162162162,
         2965572.972972973, 2972583.7837837837, 2979594.5945945946, 2986605.405405405, 2993616.2162162163,
         3000627.0270270268, 3007637.8378378376, 3014648.6486486485, 3021659.459459459, 3028670.2702702703,
         3035681.081081081, 3042691.8918918916, 3049702.7027027025, 3056713.5135135134, 3063724.3243243243,
         3070735.135135135, 3077745.9459459456, 3084756.7567567565, 3091767.567567568, 3098778.378378378,
         3105789.189189189, 3112799.9999999995, 3119860.2200732385, 3126921.719103398, 3133984.452232549,
         3141048.49911249, 3148113.858011893, 3155180.567613147, 3162248.6676318045, 3169318.1866483763,
         3176389.1367408107, 3183461.5704145855, 3190535.513186847, 3197611.0088209524, 3204688.0743123186,
         3211766.7630213466, 3218847.09904042, 3225929.148520149, 3233012.8730619433, 3240098.367287917,
         3247185.674441008, 3254274.801391262, 3261365.840725075, 3268458.79030539, 3275553.695238539,
         3282650.5973886824, 3289749.556298831, 3296850.6060176403, 3303953.796174625, 3311059.160449182,
         3318166.7547043003, 3325276.618761088, 3332388.83643783, 3339503.41660953, 3346620.425475201,
         3353739.902753253, 3360861.9059703345, 3367986.5024905214, 3375113.7329930444, 3382243.6621857397,
         3389376.3466016008, 3396511.80925813, 3403650.1848301506, 3410791.4265647093, 3417935.686932846,
         3425082.992872887, 3432233.4184151995, 3439387.017357175, 3446543.8425086676, 3453703.9893712695,
         3460867.5093926806, 3468034.4790504836, 3475204.9560460974, 3482379.031022003, 3489556.7820803537,
         3496738.340348514, 3503923.5036069234, 3511112.6740684286, 3518305.808923545, 3525502.9931580895,
         3532704.309400278, 3539909.829193214, 3547119.648198876, 3554333.861631009, 3561552.521888288,
         3568775.7531810612, 3576003.6389457397, 3583236.259107626, 3590473.7080977676, 3597716.1071208837,
         3604963.1873265295, 3612216.074701119, 3619473.848690508, 3626736.965238908, 3634005.5079187374,
         3641279.5948766633, 3648559.316177974, 3655844.8322539786, 3663136.204457777, 3670433.5624511093,
         3677736.7684289943, 3685046.7034786684, 3692362.7099872436, 3699685.205872755, 3707014.2800718104,
         3714350.059401345, 3721692.7172728097, 3729042.276315935, 3736398.9832461085, 3743762.922124871,
         3751134.283977032, 3758513.071634872, 3765899.570320196, 3773293.878136703, 3780696.1480666604,
         3788106.471758775, 3795525.0755671053, 3802952.092119322, 3810387.6816371134, 3817831.974051028,
         3825285.15920969, 3832747.4065938136, 3840218.8772394503, 3847699.730523899, 3855190.13483996,
         3862690.2508926284, 3870200.4000476324, 3877720.0867950376, 3885251.079647211, 3892792.019715132,
         3900343.6674366123, 3907906.167561987, 3915479.7262485004, 3923064.5515301097, 3930660.8466484114,
         3938268.8140522176, 3945888.8053383757, 3953520.641640281, 3961164.936702925, 3968821.7632321976,
         3976491.355685863, 3984173.9449838856, 3991869.7770325216, 3999579.0755863898, 4007302.0747752283,
         4015039.030772446, 4022790.1965452884, 4030555.7892978424, 4038336.203284073, 4046131.3854048257,
         4053941.8928733324, 4061767.916667288, 4069609.695268698, 4077467.5299463524, 4085341.6670512483,
         4093232.4840068286, 4101140.1419734107, 4109065.0590964598, 4117007.4552828176, 4124967.6557618147,
         4132945.9810409397, 4140942.716914854, 4148958.1442658016, 4156992.7640936538, 4165046.72356095,
         4173120.4143393096, 4181214.1732460093, 4189328.3482830925, 4197463.286048993, 4205619.345902933,
         4213796.882017531, 4221996.2658488555, 4230217.855410442, 4238462.045054823, 4246729.220303795,
         4255019.747898283, 4263334.039134288, 4271672.485540211, 4280035.459248786, 4288423.466863435,
         4296836.847935839, 4305276.048139697, 4313741.501135073, 4322233.647041499, 4330752.856688254,
         4339299.788394622, 4347874.687265012, 4356478.23541118, 4365110.50125002, 4373772.352710451,
         4382464.141581119, 4391186.384953962, 4399939.550513829, 4408724.161876538, 4417540.760241112,
         4426389.765870073, 4435271.885374925, 4444187.490018855, 4453137.196554856, 4462121.555847287,
         4471141.135973609, 4480196.497987205, 4489288.220675461, 4498416.88906078, 4507583.110643495,
         4516787.465247342, 4526030.579837762, 4535313.090538309, 4544635.610544187, 4553998.772490393,
         4563403.2426775405, 4572849.668888551, 4582338.537991463, 4591871.114390928, 4601447.438355169,
         4611068.4760764185, 4620734.911274128, 4630447.455987315, 4640206.83694457, 4650013.785343255,
         4659869.068490692, 4669773.412433386, 4679727.630745372, 4689732.466214558, 4699788.712767602,
         4709897.184438456, 4720058.710029055, 4730274.045315797, 4740544.099003701, 4750869.436990756,
         4761251.685643939, 4771690.941216085, 4782188.363066025, 4792744.81075679, 4803361.187150445,
         4814038.517677642, 4824777.618169005, 4835579.479580814, 4846445.032701964, 4857375.301324289,
         4868371.215779228, 4879433.818484398, 4890564.093721432, 4901763.077147701, 4913031.805930615,
         4924371.349132325, 4935782.7683010055, 4947267.1109164115, 4958825.525857771, 4970459.103832483,
         4982168.965743257, 4993956.285249144, 5005822.184800969, 5017767.836038047, 5029794.483113066,
         5041903.297075958, 5054095.455514811, 5066372.247136979, 5078734.926153069, 5091184.240681186,
         5103723.009314621, 5116350.991407908, 5129070.097577134, 5141881.502073487, 5154786.797522457,
         5167787.180792086, 5180884.064690707, 5194078.944864094, 5207373.181736147, 5220768.27009615,
         5234265.662497398, 5247866.711125316, 5261573.1497448115, 5275386.472389224, 5289308.009662699,
         5303339.529196962, 5317482.5765353255, 5331738.772129898, 5346109.698314493, 5360597.059853003,
         5375202.397925553, 5389927.627739387, 5404774.296318375, 5419744.203826619, 5434839.051534009,
         5450060.678534754, 5465410.868647386, 5480891.460881881, 5496504.285256922, 5512251.219485172,
         5528134.1775908815, 5544155.070254883, 5560315.884473319, 5576618.529136255, 5593065.028757352,
         5609657.398867135, 5626397.6956712855, 5643287.982096534, 5660330.369455802, 5677526.9929711865,
         5694879.958531529, 5712391.527934213, 5730063.748111764, 5747899.060898658, 5765899.595350131,
         5784067.55190287, 5802405.660368758, 5820915.802075921, 5839600.563208855, 5858462.322996781,
         5877503.507674828, 5896726.596556005, 5916134.074995147, 5935728.464499999, 5955512.362845481,
         5975488.307847275, 5995658.979607018, 6016026.966790827, 6036558.3484519385, 6057218.075431326,
         6078007.1597917, 6098926.645391236, 6119977.65658993, 6141161.196745389, 6162478.415802229,
         6183930.175498896, 6205517.825546096, 6227242.267729373, 6249104.736425576, 6271106.269269696,
         6293247.997448699, 6315531.043472167, 6337956.618739916, 6360525.594611568, 6383239.471042162,
         6406099.08732702, 6429105.809800546, 6452258.666174088, 6475565.0085150525, 6499019.878875584,
         6522626.501251098, 6546386.067910005, 6570299.833396849, 6594368.949388233, 6618594.6695423825,
         6642978.227642636, 6667520.834796529, 6692223.795790991, 6717088.306837052, 6742115.629638332,
         6767307.076469443, 6792663.908033768, 6818187.389874395, 6843878.884782201, 6869739.628937196,
         6895770.948675796, 6921974.202919778, 6948350.674316581, 6974901.519559721, 7001631.426964209,
         7028532.9712517345, 7055615.862763397, 7082878.7869684035, 7110323.103926396, 7137950.1924128,
         7165761.507129331, 7193758.414772674, 7221942.287972572, 7250314.683245157, 7278876.920309318,
         7307630.6096942555, 7336576.823667961, 7365717.398003205, 7395053.697388175, 7424587.191909535,
         7454319.366276628, 7484251.71945174, 7514385.779619706, 7544722.698100157, 7575265.073169162,
         7606013.371124052, 7636969.506451878, 7668135.020851898, 7699511.512125827, 7731100.528215739,
         7762903.655865507, 7794922.419201164, 7827158.695031074, 7859613.816441329, 7892289.502562077,
         7925187.387554623, 7958309.137424079, 7991656.391464733, 8025230.823210256, 8059034.113301885,
         8093067.949170156, 8127334.006647557, 8161834.029145667, 8196569.706711141, 8231542.617640772,
         8266755.006607995, 8302208.494836339, 8337903.851196299, 8373844.06060032, 8410030.462954454,
         8446464.848673737, 8483149.047271749, 8520084.853855362, 8557274.116195446, 8594718.653377619,
         8632420.34311567, 8670381.009716941, 8708602.529097462, 8747086.867040204, 8785835.73901826,
         8824851.206758495, 8864135.14728414, 8903689.44677352, 8943516.099124255, 8983617.052332502,
         9023994.101229899, 9064649.580417484, 9105585.167841332, 9146802.809642212, 9188304.953097701,
         9230093.210332781, 9272169.665076034, 9314536.490430396, 9357195.684715038, 9400149.289567312,
         9443399.429090532, 9486948.171349801, 9530797.636417873, 9574949.970126474, 9619407.258369954,
         9664171.662147429, 9709245.468746858, 9754630.455909064, 9800329.198141042, 9846343.74326249,
         9892676.29510965, 9939329.182523236, 9986304.483659303, 10033604.530970024, 10081231.583364341,
         10129187.81231301, 10177475.61901977, 10226097.275662882, 10275055.09779171, 10324351.326061137,
         10373988.439050188, 10423968.70525605, 10474294.497779133, 10524968.163484957, 10575992.201471312,
         10627368.818641717, 10679100.699208707, 10731190.088706495, 10783639.48104538, 10836451.444286756,
         10889628.195231725, 10943172.461963756, 10997086.66040453, 11051373.308559736, 11106034.936303804,
         11161074.127751509, 11216468.814992009, 11272295.354385814, 11328482.577922877, 11385057.670313956,
         11442023.230431756, 11499381.925237456, 11557136.200784255, 11615289.287905885, 11673843.311543807,
         11732801.109340653, 11792165.201600216, 11851939.01576381, 11912124.561048545, 11972724.834897831,
         12033742.704337198, 12095180.674340948, 12157041.79567276, 12219328.865985077, 12282044.598605566,
         12345191.99822089, 12408773.787364434, 12472793.070539087, 12537252.288137758, 12602154.8725943,
         12667503.270848267, 12733300.806309734, 12799550.253699776, 12866254.666304613, 12933417.028884307,
         13001040.252264364, 13069127.440400062, 13137681.674204485, 13206705.894302083, 13276203.270702885,
         13346176.861559514, 13416629.75940814, 13487565.156212255, 13558986.088801155, 13630895.76628276,
         13703297.362269776, 13776194.046526583, 13849589.175155085, 13923485.76750332, 13997887.167858018,
         14072796.627812386, 14148217.43278974, 14224152.90118792, 14300606.219537385, 14377580.893293187,
         14455080.10251228, 14533107.572295733, 14611666.157014161, 14690759.633051468, 14770390.579761958,
         14850564.773156561, 14931283.156271925, 15012550.177526223, 15094369.305811582, 15176744.035079744,
         15259677.914413666, 15343174.481197746, 15427237.297629017, 15511869.98974916, 15597076.136079462,
         15682859.319544006, 15769223.285732226, 15856171.62492248, 15943708.030432647, 16031836.258217731,
         16120559.961236108, 16209882.89515211, 16299808.93652875, 16390341.72058588, 16481485.108936165,
         16573242.943716625, 16665619.028092403, 16758617.226620523, 16852241.446388837, 16946495.57512486,
         17041383.527690645, 17136909.290070314, 17233076.778473794, 17329889.956074946, 17427352.996447783,
         17525469.53250663, 17624244.048773702, 17723680.48033805, 17823782.79401443, 17924555.188397042,
         18026001.77559566, 18128125.93918111, 18230934.074667085, 18334428.312429253, 18438613.419555523,
         18543493.623425003, 18649073.3506164, 18755356.64904203, 18862357.068553817, 18970053.969407573,
         19078472.0603892, 19187613.456985027, 19297480.300560355, 19408076.9748853, 19519407.914882164,
         19631476.66322037, 19744290.514900852, 19857851.1417464, 19972164.073799107, 20087233.615921628,
         20203064.609262835, 20319661.539337963]


def hf(T):
    """Argon enthalpy as a function of temperature."""
    return np.interp(T, temperatures, enthalpies)


def tempf(h):
    """Argon temperature as a function of enthalpy."""
    return np.interp(h, enthalpies, temperatures)


def Prf(T):
    return Cpf(T)*muvf(T)/kf(T)


if __name__ == "__main__":

    import matplotlib.pyplot as plt

    plt.figure()

    temp_ = np.linspace(100, 13000, 1000)
    mu = rhof(temp_)
    k = kf(temp_)

    plt.plot(temp_, k)

    plt.show()

    plt.figure()
    # plt.plot(temp_, hf(temp_))
    plt.plot(temp_, tempf(hf(temp_)))
    plt.show()

    plt.figure()
    plt.plot(temp_, sigmaf(temp_))
    plt.show()

    print(rhof(350))
